// MATH FUNCTIONS
.selector {
  // max(...numbers) Function

  // The max() function takes all the parameters and return the biggest value among them
  padding: max(10px, 50px, 20px, 60px, 2px);

  // min(...numbers) function

  // The min() function takes all the parameters and return the lowest value among them
  padding: min(10px, 50px, 20px, 60px, 2px);

  // random(numberLimit) Function

  // The random() function returns a random number. If you pass a parameter, it will return a random number within the specified parameter's limit.
  padding: random();
  padding: random(10);

  // unit(numberWithUnit) and unitless(numberWithoutUnit) Functions

  // -> The unit() function return the type of unit you're passing as a parameter
  // -> The unitless() function returns a boolean that says whether there is a unit in the passed parameter or not
  padding: unit(10px);
  padding: unitless(10px);
}

// STRING FUNCTIONS
.selector {
  // quote(stringWithoutQuotes) Function

  // It returns the parameter as a value with quotes ("")
  font-family: quote(arial);
  
  // unquote(stringWithQuotes) Function
  
  // It returns the parameter as a value without quotes ("")
  font-family: unquote(arial);

  // to-upper-case(lowerString) Function

  // It converts all the parameter's text to uppercase
  font-family: to-upper-case("Irineu");

  // to-lower-case(upperString) Function

  // It converts all the parameter's text to lowercase
  font-family: to-lower-case("IRINEU");

  // str-length(string) Function

  // It returns the length of a string parameter
  font-family: str-length("Irineu");

  // str-index(string, char) Function
  
  // It returns the index of the value passed as the second parameter in the first parameter's string
  font-family: str-index("Irineu", "n");

  // str-insert(string, insert, index) Function
  
  // It returns a string that is initially passed as the first parameter, but with the insertion of a value from the second parameter at a specified index within the first string.
  font-family: str-insert("Irineu", "nuSei", 4);
  
  // unique-id() Function

  // It returns a random ID Code
  font-family: unique-id();
}

// COLOR FUNCTIONS
$initialColor: blue;

.container {
  // darken(color, rate) Function

  // It makes the color used as the first parameter darker, using the second parameter as a metric
  background: darken($initialColor, 20);

  // lighten(color, rate) Function

  // It makes the color used as the first parameter lighter, using the second parameter as a metric
  background: lighten($initialColor, 20);

  // adjust-hue(color, rate) Function

  // It changes the hue of a color based on the number passed as the second parameter
  background: adjust-hue($initialColor, 50);

  // mix(color1, color2) Function

  // It mixes the colors passed as parameters
  background: mix($initialColor, red); // Blue + Red == Purple

  color: white;

  width: 600px;
  height: 100px;
  padding: 20px;
  border-radius: 20px;
}

// ----------------------------------------

// Sass Lists

$list: 20px 10px 30px;

// List methods
.selector {
  // length(list) Method

  // It takes the length of a list; counting all the values inside it
  padding: length($list);

  // nth(list, indexOfItem) Method

  // It takes a single value of a list based on the index you specify
  padding: nth($list, 2);

  // set-nth(list, indexOfItem, valueInserted) Method

  // It sets a value in a list based on the index you specify (the index can't surpass the list's limit)
  padding: set-nth($list, 3, 2em);

  // join(firstList secondList, render) Method

  // It joins two lists together and renders the values together based on a third parameter (with commas, spaces, etc...) 
  padding: join((10px, 20px, 30px), (40px, 50px, 60px), comma);

  // append(list, value) Method
  
  // It adds a value in an additional index at the end of a list
  padding: append($list, 50px);
}

// ----------------------------------------

// Sass Maps
$fontWeights: (
  "regular": 400,
  "medium": 500,
  "bold": 700
);

.selector {
  // map-get(map, index) Function

  // It takes a value inside a Map
  font-weight: map-get($fontWeights, "medium");

  // map-keys(map) Function

  // It takes all the keys of a map
  font-weight: map-keys($fontWeights);

  // map-values(map) Function

  // It takes all the values of a map
  font-weight: map-values($fontWeights);

  // map-has-key(map, index) Function
  
  // It checks if a map has an specified index and returns a boolean that shows if there is or not
  font-weight: map-has-key($fontWeights, "bold"); // true
  font-weight: map-has-key($fontWeights, "mizeravi"); // false
}